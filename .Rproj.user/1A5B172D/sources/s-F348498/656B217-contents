---
title: "期中考補考"
output: html_document
params:
  studentName: "你的名字"
  studentID: "你的學號"
---

# 注意事項

存檔與填寫注意事項：

假設你叫王小明，學號41078392。

  1. 有些同學可能家裡電腦不是utf-8設定，為防萬一，請於存檔時使用：File > save with enconding, 然後選utf-8
  
  2. 接著File > Save As..., 然後檔名改成"原始檔名-學號", 如原始檔名為exam2, 學號為41078392，則新檔名為"exam2-41078392"

  3. 本文檔開始的Frontmatter中，studentID（即key）其value目前為"你的學號"，以上面學號為例則必需改成"41078392"；而studentName（key）其value目前為"你的名字"，以上面名字為例則必需改成"王小明"
  
> 滿分100，每題配分相同

> 前述存檔與frontmatter要求缺任何一個則扣5分。

> 請於時間結束前上傳，最好提早一、二分鐘以免最後遲交。

！！！！！遲交一律0分！！！！

請先執行以下code chunk 引入所需packages，答案禁止引用其他套件（Package）。
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr); library(glue)
```

## 1. 動物森友會

這是使用rvest套件自網頁上抓回來的391位動物森友會成員，animal_crossing是個list記載了每一位動物的姓名、個性、物種、生日及口頭禪。
```{r data1}
jsonlite::fromJSON("https://www.dropbox.com/s/0sfeh3wwf5dn74q/anamial_crossing.json?dl=1", simplifyDataFrame = F) -> animal_crossing
jsonlite::fromJSON("https://www.dropbox.com/s/7vn0a9vmy7xzvsz/horoscopes2.json?dl=1") -> horoscopes0
load("/Users/martin/Desktop/GitHub/course-programming-for-data-science/108-2/exam/ans13-ans14.Rda")
```

### 1.1 資料清理
網路爬蟲抓回來的資訊有時不夠乾淨，如姓名、個性、物種三個元素，其值都有多餘的"（尚未撰写）"，而生日也有多餘的"\n", 請將每個元素多餘文字去除，清乾淨的資料存回animal_crossing. 

```{r ans11}
animal_crossing[c("姓名","個性","物種","生日")] %>%
  map(~str_remove(.x,"(（尚未撰写）|\\n)")) ->
  animal_crossing[c("姓名","個性","物種","生日")]

# animal_crossing
```

### 1.2 十二星座

執行以下程式得到12星座的開始與結束日期horoscopes：
```{r data12}
# jsonlite::fromJSON("https://www.dropbox.com/s/7vn0a9vmy7xzvsz/horoscopes2.json?dl=1") -> horoscopes0
```
請將horoscopes每個起迄日期均轉為西元2020年的date class值，如雙魚座是c("2月20日 "," 3月30日 ") 則會轉成c("2020-02-20", "2020-03-30")的date class, 並將結果回存取代horoscopes。

```{r ans12}
horoscopes0 -> horoscopes
horoscopes %>%
  map(~ymd(paste0("2020年",.x))) -> horoscopes

# horoscopes
```


### 1.3 動物星座

每次執行以下程式會產生一個myFriend，其值是隨機由動物森友會抽出的一名動物，請寫下完整流程可以找到myFriend的星座，將它存在物件myFriend_horoscope裡。（正確程式要能在每次抽出一個新的myFriend時都可以找出它的星座。）

```{r data13}
# jsonlite::fromJSON("https://www.dropbox.com/s/eb4xcfp97ro7m3y/animal_names.json?dl=1") -> .animal_names
# source("https://www.dropbox.com/s/el8yivei14wwtxs/exam_makup.R?dl=1")
# .pick_animal() -> selected_animal
# save(selected_animal, friend_circles, file="ans13-ans14.Rda")
```

以下程序第一行每次會產生一個新的selected_animal，請由selected_animal的名字找出它名字的動物生日所屬之星座，並將星座存在selected_animal_horoscope（class character）。 你的程式要接在selected_animal下一行開始，讓此chunk程式不管選出那個動物都有辦法找到它的星座。
```{r ans13}


animal_crossing$生日[animal_crossing$姓名==selected_animal] %>%
  paste0("2020年",.) %>% 
  ymd() -> selected_animal_birthday


pick_notCapricorn <- names(horoscopes)!="摩羯座"
horoscopes[pick_notCapricorn] -> horoscopes2
horoscopes2[c(12,13)] <- list(
  ymd(c("2020-12-21","2020-12-31")),
  ymd(c("2020-01-01","2020-01-20"))
)
names(horoscopes2)[c(12,13)] <- "摩羯座"

namesHoroscope <- 
  names(horoscopes2)
horoscopes2 %>%
  map(~(.x[[1]] <= selected_animal_birthday & selected_animal_birthday <= .x[[2]])) %>%
  unlist() %>%
  namesHoroscope[.] -> 
  selected_animal_horoscope

# selected_animal_horoscope
```

### 1.4 朋友圈

執行以下程式會得到動物森友的友誼關係friend_circles：
```{r data14}
# jsonlite::fromJSON("https://www.dropbox.com/s/f44hpq75s5wi8pu/animal_friend_circles.json?dl=1", simplifyDataFrame = F) -> friend_circles
```
每一個friend_circles元素有兩個子元素：

  * name: 一個動物的姓名
  
  * friends: name姓名動物的朋友，若NA即沒有朋友。

一個name加上對應friends形成一個朋友圈，若沒有朋友則不算一個朋友圈（自己不會形成一個圈），請計算森友裡總共有多少個不同的朋友圈存在答案物件circleNumber。（相同名字組合不重複計算，不同圈可以有重疊姓名。）

```{r ans14}
friend_groups <- 
  map(1:138,
      ~na.omit(c(friend_circles[[.x]]$name,    friend_circles[[.x]]$friends)))

# 有多少個group
friend_groups %>%
  map(~sort(.x)) -> .temp 
.temp %>%
  map(~paste0(.x,collapse="_")) %>%
  unlist() -> .temp2
.temp2 %>% 
  str_detect("_") -> pick_groups
.temp2[pick_groups] %>%
  unique() -> all_groups
length(all_groups) -> circleNumber

# circleNumber
```

### 1.5 誰是核心人物
不同朋友圈會有重疊，與越多不同朋友圈有交集的動物是森友會的熱門核心動物，請找出最熱門動物的姓名並存在popularAnimal。
```{r ans15}
animal_crossing$姓名 %>%
  map(~sum(str_detect(all_groups,.x))) %>%
  unlist() ->
  popular_count

names(popular_count) <- animal_crossing$姓名 

popular_count %>%
  sort(decreasing=T) %>%
  names() -> popularity

popularity[[1]] -> popularAnimal

# popularAnimal
```

## 2. 匿名

執行以下程序取得[二二八事件人名索引](https://data.gov.tw/dataset/56237)部份資料物件data228_partial:

  * 程式會跑一會才能下載完畢，請耐心等候。
  
```{r data2}
data228_partial <- jsonlite::fromJSON("https://www.dropbox.com/s/y0ozl0y980t14d6/data228_partial.json?dl=1")
```

data228_partial有四個元素：

  * 檔號
  
  * 全宗名：文件所屬單位
  
  * 個人名稱：與二二八事件有關人名
  
  * 附註：前述個人名稱的出處文件

### 2.1 全宗名編號
「檔號」是由/符號區隔的4組代號組成，它的前兩部份分別代表「全宗名」及「檔案年份」，以第一筆資料"A803000000A/0036/340.2/5502.3"為例，A803000000A代表全宗名為國家安全局，檔案為民國36年資料。請在data228_partial新增「全宗名編號」元素：

  * 全宗名編號：由檔號取出代表全宗名的編號。（class factor）
  
```{r ans21}
data228_partial$檔號 %>%
  str_split("/") %>%
  map(~.x[[1]]) %>%
  unlist %>%
  factor() -> data228_partial$全宗名編號

# data228_partial$全宗名編號
```

### 2.2 各宗號人數
請計算每個全宗名編號牽涉到幾個不同的個人名稱，將結果存在personCount_eachDocument(class integer), 其個別元素名稱為其全宗名編號。

```{r ans22}
levels(data228_partial$全宗名編號) %>%
  map(~length(unique(data228_partial$個人名稱[
                            data228_partial$全宗名編號==.x
  ]))) %>%
  unlist() -> personCount_eachDocument
names(personCount_eachDocument) <- levels(data228_partial$全宗名編號)

sort(personCount_eachDocument, 
     decreasing=T) -> personCount_eachDocument

# personCount_eachDocument
```

### 2.3 內政部警政署

取出data228_partial中以「全宗名編號」判斷下屬於「內政部警政署」的資料存在答案物件data228_police（class list, list of 5 elements）。（以全宗名編號判斷是為了避免有全宗名輸入錯誤的判斷，故安全起見先找出全宗名應有之全宗名編號，再以此編號篩選資料。）

```{r ans23}
pick_police <-
  data228_partial$全宗名=="內政部警政署"
data228_partial$全宗名編號[pick_police] %>%
  unique() %>%
  as.character() -> bureauNumber

pick_police2 <-
  data228_partial$全宗名編號==bureauNumber
data228_police <- data228_partial %>%
  map(~.x[pick_police2])

# data228_police
```

### 2.4 個人編碼

文字資訊常有單位改名或輸入錯誤而造成後續查詢不易，請將data228_police新增「個人宗名編號」元素，元素可能值為"全宗名編號/00001"，"全宗名編號/00002"，一直到"全宗名編號/0XXXX"，其中「全宗名編號」是「`data228_police$全宗名編號`」相同元素位置下的全宗名編號，而00001代表屬於此全宗名編號下的第一個人，00002代表屬於此全宗名編號下的第二個人，依此類推；所以同一全宗名編號底下的相同人名只會有「一個」個人宗名編號。(`data228_police$個人宗名編號`：class character)
(要產生五位數字的文字前面加0你可能需要str_pad函數)

```{r ans24}
bureauNumber <- 
  data228_police$全宗名編號 %>% unique()

data228_police$個人名稱 -> names_involved

names_involved %>%
  factor() -> fct_names_involved

levels(fct_names_involved) %>%
  length() -> totalNumber

1:totalNumber %>%
  str_pad(5,side="left", pad="0") -> 
  names_coded

levels(fct_names_involved) <- names_coded

data228_police$個人宗名編號 <- 
  paste0(
    data228_police$全宗名編號,"/",
    as.character(fct_names_involved))

# data228_police$個人宗名編號
```

