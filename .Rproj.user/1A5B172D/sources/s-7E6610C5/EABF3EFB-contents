---
---
```{r}
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
```
```{r}
tainanSportsMap[[1]]
```
```{r}
tfboys<-c("kevin","roy","jacjson")
length(tfboys)
```
```{r}
tfboys[[2]]
tfboys$jackson
#?向量中無法用$以元素的名字找元素?
```

```{r}
listExample <- 
  list(
    student="小明",
    `學期`=list(
      `108-1`=list(
        list(
          name="個體經濟學",
          teacher="Alice",
          grade=85
        )
      ),
      `108-2`=list(
        list(
          name="總體經濟學",
          teacher="Mark",
          grade=78
        )
      )
    )
  )
# 有多少位置可選：
length(listExample)

#只會顯示最外面的那個list中有幾個元素
```
```{r}
listExample[[2]]
```
```{r}
listExample$student
listExample$`學期`
listExample[["學期"]]
listExample[["student"]]
`學期`$`108-1`
#為什麼不行
```

```{r}
listExample[["學期"]]
listExample[["108-1"]]
```

```{r}
listExample[["student"]]
#加""要找一個叫student的變數名稱
listExample[[student]]
#被認為要找一個叫student的變數值

```

```{r}
#修正
student<-"student"
listExample[[student]]
```





```{r}
library(jsonlite)
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
         simplifyDataFrame = F) -> newTaipeiCityVaccine
```

```{r}
str(newTaipeiCityVaccine,max.level = 2)
length(newTaipeiCityVaccine)
#知道第一個大list有幾個元素
names(newTaipeiCityVaccine)
#知道他大list的物件名稱
```

```{r}
newTaipeiCityVaccine[[1]]
str(newTaipeiCityVaccine[[1]])

newTaipeiCityVaccine$result
str(newTaipeiCityVaccine$result,max.level = 1)

```

```{r}
newTaipeiCityVaccine[["result"]]
newTaipeiCityVaccine[["success"]]
```


```{r}
tfboys<-c("kevin","roy","jacjson")
tfboys[c(3,1,2)]
tfboys[c(1,2)]
tfboys[c("kevin","jacjson")]

```

```{r}
vectorExample <- c("小明","小英","大雄")
vectorExample
vectorExample[c(1,3)]
vectorExample[c(3,2,1)] # 產生重新排列效果

vectorExample[c("小明","大雄")]
vectorExample$大雄
#以下2行無法執行是因為小明跟大雄都是元素(變數)值，他們沒有變數的名稱
```

```{r}
listExample <- 
  list(
    student="小明",
    `學期`=list(
      `108-1`=list(
        list(
          name="個體經濟學",
          teacher="Alice",
          grade=85
        )
      ),
      `108-2`=list(
        list(
          name="總體經濟學",
          teacher="Mark",
          grade=78
        )
      )
    )
  )
# 有多少位置可選：
length(listExample)
```

```{r}
str(listExample,max.level = 1)
listExample[c(2,1)]
listExample[c("學期","student")]
```

```{r}
library(jsonlite)
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
```

```{r}
str(taipeiNightMarkets)
```

```{r}
length(taipeiNightMarkets)
names(taipeiNightMarkets)
str(taipeiNightMarkets[3],max.level = 1)
str(taipeiNightMarkets$西昌街觀光夜市 ,max.level = 1)
str(taipeiNightMarkets[c(3,5)],max.level = 1)
str(taipeiNightMarkets[c("廣州街觀光夜市","西昌街觀光夜市")],max.level = 1)
```


```{r}
names(selectedtaipeiNightMarkets)<- rep(F,14)
selectedtaipeiNightMarkets
selectedtaipeiNightMarkets[C(1,5,10,14)]<-TRUE
```


```{r}
listExample <- 
  list(
    student="小明",
    `學期`=list(
      `108-1`=list(
        list(
          name="個體經濟學",
          teacher="Alice",
          grade=85
        )
      ),
      `108-2`=list(
        list(
          name="總體經濟學",
          teacher="Mark",
          grade=78
        )
      )
    )
  )
# 有多少位置可選：
str(listExample,max.level = 3)
```

```{r}
get1=listExample[["學期"]]
str(get1,max.level = 2)

```


```{r}
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")

ecoOnlyNames<-names[c(1,2,5)];ecoOnlyNames
ecoOnlyGender<-gender[c(1,2,5)];ecoOnlyGender
econFemaleOnly<-ecoOnlyGender[c(T,T,F)];econFemaleOnly
names[c(1,2)]
```

```{r}
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
econOnly <- c(T,T,F,F,T)
names[econOnly]
gender[econOnly]
econFemaleOnly <- c(T,T,F)
names[econOnly][econFemaleOnly]
```
```{r}
n<- 0.8

conditionExpression_outcome <-
  if(n>=1){
  ifelse(n %% 2==0 , "even", "odd") }else{"warning"}

switch(
  conditionExpression_outcome,
  "even"={fvalue <- n/2}, # 偶數
  "odd"={fvalue <- -(n+1)/2},# 奇數；只有一行指令可省略{}
  { fvalue<-warning("n要整數喔")}
)
print(fvalue)


```
```{r}
fun12<-function(n){

conditionExpression_outcome <-
  if(n>=1){
  ifelse(n %% 2==0 , "even", "odd") }else{"warning"}

switch(
  conditionExpression_outcome,
  "even"={fvalue <- n/2}, # 偶數
  "odd"={fvalue <- -(n+1)/2},# 奇數；只有一行指令可省略{}
  warning("n要整數喔")
)
return(fvalue)


}
fun12(250)
fun12(0.8)
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r}
grade <- sample(0:100,10,replace = T)
grade
cut(grade,c(-1,69,79,89,100)) -> grade_interval

levels(grade_interval)

switch(as.character(grade[[1]]),   ##取出第一個   ##但其實題目不是要print ABCD
       "(89,100]"=paste0("A","好棒棒"),
       "(79,89]"=paste0("B","好棒"),
       "(69,79]"=paste0("C","棒"),
       "(-1,69]"=paste0("F","-_-")
  
)


```
```{r}
compute_howEarly <- function(x){
  for(x in 1:152){   ##接下來所有跟x有關的都要放在for裡面
    
    student_x_section <- examSubmissionTime$section[[x]]
    student_x_time <- examSubmissionTime$time[[x]]

  if(student_x_section=="56"){
  deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else{
  deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
  early <- deadline-lubridate::ymd_hms(student_x_time,tz="Asia/Taipei")
}
return(early)
  }


compute_howEarly(x)
```

```{r}
output <- vector("list", 10)
output

```
```{r}
sum <- 0
for(i in 1:100){
  newToss <- sample(c("正","反"), 1, replace=T)
  if(newToss == "正"){
    sum <- sum+1
  }
  print(glue::glue("已擲{i}次得到{sum}次正面"))
  if(sum==5){
    break
  }
}

```

```{r cars}
summary(cars)
```

```{r}
my_fun2<-function(vec){
  ans_vec<-c()
  each<-unlist(map(vec,~.x%%2==0))
  condition_vec<-ifelse(each,"even","ord")
  for(n in 1:length(condition_vec)){
    condition=condition_vec[[n]]
    switch(condition,
         "even"={ans=n/2},
         "ord"={ans=-(n+1)/2})
```

```{r}
vec<-c(-11,32,19,20)
ans_vec<-c()
  each<-unlist(map(vec,~.x%%2==0))
  condition_vec<-ifelse(each,"even","ord")
  condition_vec
  for(n in 1:length(condition_vec)){
    condition=condition_vec[[n]]
    switch(condition,
         "even"={ans=vec[[n]]/2},
         "ord"={ans=-(vec[[n]]+1)/2})
    ans
    ans_vec<-c(ans_vec,ans)
   }
    
     
     ans_vec
```

```{r}
ans_vec<-c(ans_vec,ans)}
  return(ans_vec)
  }

my_fun2(c(-11,32,19,20))
```
```
```{r}
my_fun2<-function(vec){
  ans_vec<-c()
  each<-unlist(map(vec,~.x%%2==0))
  condition_vec<-ifelse(each,"even","ord")
  for(n in 1:length(condition_vec)){
    condition=condition_vec[[n]]
    switch(condition,
         "even"={ans=n/2},
         "ord"={ans=-(n+1)/2})
    ans_vec<-c(ans_vec,ans)}
  return(ans_vec)
  }
```

```{r}
my_fun2<-function(vec){
  ans_vec<-c()
  each<-unlist(map(vec,~.x%%2==0))
  condition_vec<-ifelse(each,"even","ord")
  for(n in 1:length(condition_vec)){
    condition=condition_vec[[n]]
    switch(condition,
         "even"={ans=n/2},
         "ord"={ans=-(n+1)/2})
    ans_vec<-c(ans_vec,ans)}
  return(ans_vec)
  }

my_fun2(c(-11,32,19,20))
```

my_fun2(c(-11,32,19,20))
```




```{r}


## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
