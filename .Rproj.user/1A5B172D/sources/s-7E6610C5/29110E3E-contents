---
---
```{r}
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate); library(jsonlite)
```

```{r}
#1.1
Ufun<-function(a1, a2, m, alpha=0.5){
  
  a1^alpha*a2^(1-alpha)-m
}


#1.2
Apps_10 <- list(
  c(0.38,0.74,0.19), c(0.39,0.46,0.26),
  c(0.56,0.3,0.32), c(0.54,0.31,0.40), c(0.90,0.56,0.43), c(0.39,0.13,0.23), 
  c(0.83,0.74,0.39), c(0.66,0.84,0.37), c(0.41,0.49,0.35),
  c(0.49,0.35,0.20))

map(seq_along(Apps_10),~Ufun(Apps_10[[.x]][[1]],Apps_10[[.x]][[2]],Apps_10[[.x]][[3]]))
```

`
```{r}
alpha<-0.5
Ufun<-function(a1, a2, m){
  a1^alpha*a2^(1-alpha)-m
}


#1.2
Apps_10 <- list(
  c(0.38,0.74,0.19), c(0.39,0.46,0.26),
  c(0.56,0.3,0.32), c(0.54,0.31,0.40), c(0.90,0.56,0.43), c(0.39,0.13,0.23), 
  c(0.83,0.74,0.39), c(0.66,0.84,0.37), c(0.41,0.49,0.35),
  c(0.49,0.35,0.20))
map(Apps_10,~ Ufun(.x))
```
```{r}
str_cut<-function(x, cutpoints){
  interval<-cut(x,c(0,199999,299999,Inf))
  names<-c("未滿200,000元", "200,000～299,999元", "300,000元及以上")
  levels(interval)<-names
  interval

  
}

str_cut(100000)

```


```{r}
#5.4.5-2
a<-cut(100000,c(0,199999,299999,Inf))
a
levels(a)
names<-c("未滿200,000元", "200,000～299,999元", "300,000元及以上")
levels(a)<-names
a

```

```{r}
#5.4.5 -1
my_fun2<-function(vec){
  ans_vec<-c()
  each<-unlist(map(vec,~.x%%2==0))
  condition_vec<-ifelse(each,"even","ord")
  for(n in 1:length(condition_vec)){
    condition=condition_vec[[n]]
    switch(condition,
         "even"={ans=n/2},
         "ord"={ans=-(n+1)/2})
    ans_vec<-c(ans_vec,ans)}
  return(ans_vec)
  }

my_fun2(c(-11,32,19,20))
```


```{r}
askSilly_weather2(c("臺北市","新北市","臺中市"),lubridate::now())

askSilly_weather2 <- function(locationInput,dateInput){
  if(!exists("weather_next36hours")){
      jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
      weather_next36hours
    SOAR::Store(weather_next36hours) # 存在.R_cache environment中
  }  
  (weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
  
  weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
  (weatherAtLocation$elementName=="MaxT") ->
    pick_MaxT
  (weatherAtLocation$elementName=="MinT") ->
    pick_MinT
  weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
  weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
  
  glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}




```


```{r}
askSilly_weather3<-function(cityvec,dateInput){
  evercity_tem<-c()
  locationInput_vec<-unlist(map(cityvec,~.x))
  for(locationInput in 1:length(locationInput_vec)){
    function(locationInput){
  if(!exists("weather_next36hours")){
      jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
      weather_next36hours
    SOAR::Store(weather_next36hours) # 存在.R_cache environment中
  }  
  (weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
  
  weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
  (weatherAtLocation$elementName=="MaxT") ->
    pick_MaxT
  (weatherAtLocation$elementName=="MinT") ->
    pick_MinT
  weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
  weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
  
  glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")->onecity_tem
   evercity_tem<- c(evercity_tem,onecity_tem)
}

    
    
  }
  return(evercity_tem)}

askSilly_weather3(c("臺北市","新北市","臺中市"),lubridate::now())
```
```{r}

askSilly_weather3<-function(allcity,dateInput){
  alltem<-c()
  map(allcity,~askSilly_weather2(.x,dateInput))
  

askSilly_weather2 <- function(locationInput,dateInput){
  if(!exists("weather_next36hours")){
      jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
      weather_next36hours
    SOAR::Store(weather_next36hours) # 存在.R_cache environment中
  }  
  (weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
  
  weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
  (weatherAtLocation$elementName=="MaxT") ->
    pick_MaxT
  (weatherAtLocation$elementName=="MinT") ->
    pick_MinT
  weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
  weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
  
  glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")->onetem
  alltem<-c(alltem,onetem)
  
}
return(alltem)
}

askSilly_weather3(c("臺北市","新北市","臺中市"),lubridate::now())
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
