---

---
```{r}
`需求函數`<-function(p){q_d<-0+2*P}
```

```{r}
strip1 <- "[0-9]"
strip2 <- "(櫻桃|777|紅心)"  # 字群組合strip因為等下放中間所以用()括起來
strip3 <- "[A-Z]"
myRegexSlotMachine <- paste0(strip1, strip2, strip3)
print(myRegexSlotMachine)
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
# 顯示吻合的出象
str_view(c(claimA, claimB, claimC), pattern = myRegexSlotMachine)
# 是否有吻合的出象
str_detect(c(claimA, claimB, claimC), pattern = myRegexSlotMachine)
```
```{r}
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
```

```{r}
# 顯示所有符合規則的
str_extract(headline, "謝陳官")  # 固定字組
str_count(headline, "謝陳官")

str_view_all(headline, "[謝陳官]")
# 有1個strip: 出象有3個可能字元 
str_extract(headline, "[謝陳官]{1,3}")
str_count(headline, "[謝陳官]")

str_view_all(headline, "謝無雙|官求敗")  # 有1個strip，出象有2個字組 
str_count(headline, "謝無雙|官求敗")

str_view_all(headline, "陳[^官]")  # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
```
```{r}
addresses <- c("臺中市后里區公館里尾社路385號", "新竹市東區科學園路125號1樓", 
    "新竹市北區竹光路99號", "金門縣金城鎮賢庵里山前33號", "臺中市南屯區工業區二十四路23號1樓")
```

```{r}
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses, myRegexSlotMachine)
str_extract(addresses, myRegexSlotMachine)

str_extract(addresses, "[0-9]+")  # 樓號也會選到
```
```{r}
phrase <- c("唧唧复唧唧")
# 目標是前面的唧唧
target_regex <- "唧唧"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(phrase, pattern)
str_extract(phrase, pattern)
```
```{r}
# 目標是後面的唧唧
target_regex2 <- "唧唧"
pattern <- glue::glue("{target_regex2}$")
print(pattern)
str_view(phrase, pattern)
```

```{r}
char2 <- c("蔡英文", "習近平", "Donald Trump", "蔡頭")
factor2 <- factor(char2)
levels(factor2)

sort(str_sub(char2, 1, 2))
sort(str_sub(char2, 2, 2))
```
```{r}
```


```{r}
population <- jsonlite::fromJSON("https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1")
population <- unlist(population)
```


```{r}
population<-factor(population)
levels(population)
str(population)
print(population)
class(population)  # 判斷出是named integer vector
names(population)  # 元素名稱是台灣各縣市
```
```{r}
covid19 <- jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json")
```

```{r}
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <- factor(covid19$縣市)
covid19$性別 <- factor(covid19$性別)
covid19$是否為境外移入 <- factor(covid19$是否為境外移入)
# 可排序類別資料：年齡層
covid19$年齡層 <- factor(covid19$年齡層, ordered = TRUE)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
levels(covid19$年齡層)
```

```{r}
str_extract_all(c("民國108年12月5日", "民國98年10月5日"), "(?<=民國)[0-9]{2,3}(?=年)")  # 回傳list 

str_extract(c("民國108年12月5日", "民國98年10月5日"), "(?<=民國)[0-9]{2,3}(?=年)")  # 回傳vector 
```

```{r}
library(stringr)
fruit <- c("apple", "banana", "pear", "pinapple")
fruit 
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")

# Also vectorised over pattern
str_detect("aecfg", letters)

# Returns TRUE if the pattern do NOT match
str_detect(fruit, "^p", negate = TRUE)
```
```{r}
str_sub("410873002", 5, 9
        )
```

```{r}
a <- c(22, NA, 18)
a
is.na(a)
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r}
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量

weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation

# 在weatherAtLocation找出符合時間的天氣資訊

(weatherAtLocation$elementName=="MaxT") ->
  pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
  pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT

glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
```

```{r}
demand <- # 創造一個物件叫demand
  function(p){ # 定義這個物件為函數
    q_d <- 10-5*p # 小心是5*p, 不能寫5p
  }
```

```{r}
demand_return <- 
  function(p){
    q_d <- 10-5*p
    return(q_d)
  }
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
```

```{r}
class(demand_return)
# 查詢函數formals arguments要求
formals(demand_return)
# 查詢函數主體
body(demand_return)
```
```{r}
typeof(demand_return)
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
```
```{r}

```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
