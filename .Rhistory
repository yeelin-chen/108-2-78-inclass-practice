list_econCourseCounts<-list(
entranceYear=100:103,
year1=length(unlist(map(entranceYear,~same_grade(.x,"經濟系1")))),
year2=length(unlist(map(entranceYear,~same_grade(.x,"經濟系2")))),
year3=length(unlist(map(entranceYear,~same_grade(.x,"經濟系3")))),
year4=length(unlist(map(entranceYear,~same_grade(.x,"經濟系4"))))
)
list_econCourseCounts
# list_econCourseCounts
return(course)}
same_grade<-function(entranceYear,major){
pick_year<-courseStructure$`學年`==entranceYear
pick_major<-str_detect(courseStructure$`應修系級`,major)
course<-courseStructure$`科目名稱`[pick_year&pick_major]
return(course)}
list_econCourseCounts<-list(
entranceYear=100:103,
year1=length(unlist(map(entranceYear,~same_grade(.x,"經濟系1")))),
year2=length(unlist(map(entranceYear,~same_grade(.x,"經濟系2")))),
year3=length(unlist(map(entranceYear,~same_grade(.x,"經濟系3")))),
year4=length(unlist(map(entranceYear,~same_grade(.x,"經濟系4"))))
)
list_econCourseCounts
# list_econCourseCounts
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
surface_A<-15*10*2+15*20*2+20*10*2
surface_A
# surface_A
surface_cube<-function(len,wet,hi)
{sur<-len*wet*2+len*hi*2+wet*hi*2
return(sur)}
surface_cube(20,10,15)
surface_cube
# surface_cube
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
num<-Mask$`身分證字號`[[1]]
num<-as.character(num)
last_num<-as.integer(str_extract(num,"[:graph:]$"))
`1st_odd_or_even`<-last_num %% 2
`1st_odd_or_even`
# `1st_odd_or_even`
odd_or_even<-function(num){
num<-as.character(num)
last_num<-as.integer(str_extract(num,"[:graph:]$"))
`1st_odd_or_even`<-last_num %% 2
return(`1st_odd_or_even`)}
odd_or_even
# odd_or_even
data.frame(
weekday = str_c("星期",c("天","一","二","三","四","五","六")),
number = c(1:7)
) -> weekday_chart
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6)
)
chart[[odd_or_even(Mask$`身分證字號`[[1]])+1]]
buyable<-function(last_num){
t_date<-today()
chart <- list(
`單` = c(1,2,4,6),
`雙` = c(1,3,5,7)
)
chart[[odd_or_even(Mask$`身分證字號`[[1]])+1]]
}
# 1st_next_date
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
get_courses<-function(entranceYear, major){
pick_year<-courseStructure$`學年`==as.character(entranceYear)
pick_major1<-str_detect(courseStructure$`應修系級`,paste0(major,"1"))
pick_major2<-str_detect(courseStructure$`應修系級`,paste0(major,"2"))
pick_major3<-str_detect(courseStructure$`應修系級`,paste0(major,"3"))
pick_major4<-str_detect(courseStructure$`應修系級`,paste0(major,"4"))
course<-list(
year1=unique(courseStructure$`科目名稱`[pick_year&pick_major1]),
year2=unique(courseStructure$`科目名稱`[pick_year&pick_major2]),
year3=unique(courseStructure$`科目名稱`[pick_year&pick_major3]),
year4=unique(courseStructure$`科目名稱`[pick_year&pick_major4]))
return(course)
}
get_courses
# get_courses
majors <- c("經濟系","社學系","社工系")
entranceYears <- 100:103
# 三系對100-103學年入學學生的四個年級課程規劃
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[1]])) ->
list_major1_allYears # 經濟系
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得社會系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[2]])) ->
list_major2_allYears # 社會系
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得社工系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[3]])) ->
list_major3_allYears # 社工系
str(list_major1_allYears)
get_coursesAllYears <- function(entranceYears, major){
# 可以針對「單一」major系對entranceYears裡不同入學年一一求算該系對該入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, major)) ->
list_major1_allYears
return(list_major1_allYears)
}
# 一一將majors裡的系取出進行get_coursesAllYears運算以得到「取出系」在不同entranceYears入學年下的系課程規劃。
majors %>%
map(~get_coursesAllYears(entranceYears, .x)) -> list_coursesAllMajorsAllYears
same_grade<-function(entranceYear,major){
pick_year<-courseStructure$`學年`==entranceYear
pick_major<-str_detect(courseStructure$`應修系級`,major)
course<-courseStructure$`科目名稱`[pick_year&pick_major]
return(course)}
list_econCourseCounts<-list(
entranceYear=100:103,
year1=length(unlist(map(entranceYear,~same_grade(.x,"經濟系1")))),
year2=length(unlist(map(entranceYear,~same_grade(.x,"經濟系2")))),
year3=length(unlist(map(entranceYear,~same_grade(.x,"經濟系3")))),
year4=length(unlist(map(entranceYear,~same_grade(.x,"經濟系4"))))
)
same_grade<-function(entranceYear,major){
pick_year<-courseStructure$`學年`==entranceYear
pick_major<-str_detect(courseStructure$`應修系級`,major)
course<-courseStructure$`科目名稱`[pick_year&pick_major]
return(course)}
list_econCourseCounts<-list(
entranceYear=entranceYear=100:103,
same_grade<-function(entranceYear,major){
pick_year<-courseStructure$`學年`==entranceYear
pick_major<-str_detect(courseStructure$`應修系級`,major)
course<-courseStructure$`科目名稱`[pick_year&pick_major]
return(course)}
list_econCourseCounts<-list(
entranceYear=c(100:103),
year1=length(unlist(map(entranceYear,~same_grade(.x,"經濟系1")))),
year2=length(unlist(map(entranceYear,~same_grade(.x,"經濟系2")))),
year3=length(unlist(map(entranceYear,~same_grade(.x,"經濟系3")))),
year4=length(unlist(map(entranceYear,~same_grade(.x,"經濟系4"))))
)
odd_or_even<-function(num){
num<-as.character(num)
last_num<-as.integer(str_extract(num,"[:graph:]$"))
`1st_odd_or_even`<-last_num %% 2
return(`1st_odd_or_even`)}
odd_or_even
# odd_or_even
View(weekday_chart)
str(weekday_chart)
chart[[odd_or_even(Mask$`身分證字號`[[1]])+1]]
today()
wday
wday()
wday(today())
View(Mask)
num
num<-Mask$`身分證字號`[[1]]
last_num<-as.integer(str_extract(num,"[:graph:]$"))
`1st_odd_or_even`<-last_num %% 2
`1st_odd_or_even`
# `1st_odd_or_even`
num<-Mask$`身分證字號`[[1]]
last_num<-as.integer(str_extract(num,"[:graph:]$"))
`1st_odd_or_even`<-last_num %% 2
`1st_odd_or_even`
# `1st_odd_or_even`
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
surface_A<-15*10*2+15*20*2+20*10*2
surface_A
# surface_A
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
num<-Mask$`身分證字號`[[1]]
last_num<-as.integer(str_extract(num,"[:graph:]$"))
`1st_odd_or_even`<-last_num %% 2
`1st_odd_or_even`
# `1st_odd_or_even`
num<-Mask$`身分證字號`[[1]]
last_num<-as.integer(str_extract(num,"[:graph:]$"))
`1st_odd_or_even`<-last_num %% 2
`1st_odd_or_even`
# `1st_odd_or_even`
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
last_num
num<-Mask$`身分證字號`[[1]]
last_num<-as.integer(str_extract(num,"(?<=[:upper:])[:digit:]$"))
`1st_odd_or_even`<-last_num %% 2
`1st_odd_or_even`
# `1st_odd_or_even`
num
last_num<-as.integer(str_extract(num,"(?<=[:upper:])[:digit:]$"))
last_num
last_num<-as.integer(str_extract(num,"(?<=[:upper:])[:digit:]$"))
last_num<-as.integer(str_extract(num,"(?<=[:upper:])[:digit:]$"))
num<-Mask$`身分證字號`[[1]]
num
last_num<-as.integer(str_extract(num,"(?<=[A-Z])[:digit:]$"))
`1st_odd_or_even`<-last_num %% 2
`1st_odd_or_even`
# `1st_odd_or_even`
num<-Mask$`身分證字號`[[1]]
num
last_num<-as.integer(str_extract(num,"[:digit:]$"))
`1st_odd_or_even`<-last_num %% 2
`1st_odd_or_even`
# `1st_odd_or_even`
num<-Mask$`身分證字號`[[1]]
num
last_num<-as.integer(str_extract(num,"[:digit:]$"))
`1st_odd_or_even`<-last_num %% 2
`1st_odd_or_even`
# `1st_odd_or_even`
num<-Mask$`身分證字號`[[1]]
last_num<-as.integer(str_extract(num,"[:graph:]$"))
`1st_odd_or_even`<-last_num %% 2
`1st_odd_or_even`
# `1st_odd_or_even`
class(num)
eachnum<-Mask$`身分證字號`
print(eachnum)
odd_or_even
return(`1st_odd_or_even`)}
odd_or_even<-function(num){
num<-Mask$`身分證字號`
print(num)
last_num<-as.integer(str_extract(num,"[:graph:]$"))
`1st_odd_or_even`<-last_num %% 2return(`1st_odd_or_even`)}
odd_or_even<-function(num){
num<-Mask$`身分證字號`
print(num)
last_num<-as.integer(str_extract(num,"[:graph:]$"))
`1st_odd_or_even`<-last_num %%2
return(`1st_odd_or_even`)}
odd_or_even
# odd_or_even
odd_or_even(Mask$`身分證字號`[[1]])
odd_or_even<-function(num){
num<-Mask$`身分證字號`
last_num<-as.integer(str_extract(num,"[:graph:]$"))
`1st_odd_or_even`<-last_num %%2
return(`1st_odd_or_even`)}
odd_or_even
odd_or_even(Mask$`身分證字號`[[1]])
# odd_or_even
odd_or_even<-function(num){
last_num<-as.integer(str_extract(num,"[:graph:]$"))
`1st_odd_or_even`<-last_num %%2
return(`1st_odd_or_even`)}
odd_or_even
odd_or_even(Mask$`身分證字號`[[1]])
# odd_or_even
get_courses<-function(entranceYear, major){
pick_year<-courseStructure$`學年`==as.character(entranceYear)
pick_major1<-str_detect(courseStructure$`應修系級`,paste0(major,"1"))
pick_major2<-str_detect(courseStructure$`應修系級`,paste0(major,"2"))
pick_major3<-str_detect(courseStructure$`應修系級`,paste0(major,"3"))
pick_major4<-str_detect(courseStructure$`應修系級`,paste0(major,"4"))
course<-list(
year1=unique(courseStructure$`科目名稱`[pick_year&pick_major1]),
year2=unique(courseStructure$`科目名稱`[pick_year&pick_major2]),
year3=unique(courseStructure$`科目名稱`[pick_year&pick_major3]),
year4=unique(courseStructure$`科目名稱`[pick_year&pick_major4]))
return(course)
}
get_courses
# get_courses
majors <- c("經濟系","社學系","社工系")
entranceYears <- 100:103
# 三系對100-103學年入學學生的四個年級課程規劃
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[1]])) ->
list_major1_allYears # 經濟系
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
get_courses<-function(entranceYear, major){
pick_year<-courseStructure$`學年`==as.character(entranceYear)
pick_major1<-str_detect(courseStructure$`應修系級`,paste0(major,"1"))
pick_major2<-str_detect(courseStructure$`應修系級`,paste0(major,"2"))
pick_major3<-str_detect(courseStructure$`應修系級`,paste0(major,"3"))
pick_major4<-str_detect(courseStructure$`應修系級`,paste0(major,"4"))
course<-list(
year1=unique(courseStructure$`科目名稱`[pick_year&pick_major1]),
year2=unique(courseStructure$`科目名稱`[pick_year&pick_major2]),
year3=unique(courseStructure$`科目名稱`[pick_year&pick_major3]),
year4=unique(courseStructure$`科目名稱`[pick_year&pick_major4]))
return(course)
}
get_courses
# get_courses
majors <- c("經濟系","社學系","社工系")
entranceYears <- 100:103
# 三系對100-103學年入學學生的四個年級課程規劃
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[1]])) ->
list_major1_allYears # 經濟系
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得社會系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[2]])) ->
list_major2_allYears # 社會系
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得社工系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[3]])) ->
list_major3_allYears # 社工系
str(list_major1_allYears)
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
`1st_odd_or_even`
`1st_odd_or_even`
odd_or_even(Mask$`身分證字號`[[2]])
odd_or_even(Mask$`身分證字號`[[3]])
odd_or_even(Mask$`身分證字號`[[5]])
View(courseStructure)
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
get_courses<-function(entranceYear, major){
pick_year<-courseStructure$`學年`==as.character(entranceYear)
pick_major1<-str_detect(courseStructure$`應修系級`,paste0(major,"1"))
pick_major2<-str_detect(courseStructure$`應修系級`,paste0(major,"2"))
pick_major3<-str_detect(courseStructure$`應修系級`,paste0(major,"3"))
pick_major4<-str_detect(courseStructure$`應修系級`,paste0(major,"4"))
course<-list(
year1=unique(courseStructure$`科目名稱`[pick_year&pick_major1]),
year2=unique(courseStructure$`科目名稱`[pick_year&pick_major2]),
year3=unique(courseStructure$`科目名稱`[pick_year&pick_major3]),
year4=unique(courseStructure$`科目名稱`[pick_year&pick_major4]))
return(course)
}
get_courses
# get_courses
View(courseStructure)
class(courseStructure$`學年`)
same_grade<-function(entranceYear,major){
pick_year<-courseStructure$`學年`==as.character(entranceYear)
pick_major<-str_detect(courseStructure$`應修系級`,major)
course<-courseStructure$`科目名稱`[pick_year&pick_major]
return(course)}
list_econCourseCounts<-list(
entranceYear=c(100:103),
year1=length(unlist(map(entranceYear,~same_grade(.x,"經濟系1")))),
year2=length(unlist(map(entranceYear,~same_grade(.x,"經濟系2")))),
year3=length(unlist(map(entranceYear,~same_grade(.x,"經濟系3")))),
year4=length(unlist(map(entranceYear,~same_grade(.x,"經濟系4"))))
)
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
class(courseStructure$`學年`)
get_courses<-function(entranceYear, major){
pick_year<-courseStructure$`學年`==as.character(entranceYear)
pick_major1<-str_detect(courseStructure$`應修系級`,paste0(major,"1"))
pick_major2<-str_detect(courseStructure$`應修系級`,paste0(major,"2"))
pick_major3<-str_detect(courseStructure$`應修系級`,paste0(major,"3"))
pick_major4<-str_detect(courseStructure$`應修系級`,paste0(major,"4"))
course<-list(
year1=unique(courseStructure$`科目名稱`[pick_year&pick_major1]),
year2=unique(courseStructure$`科目名稱`[pick_year&pick_major2]),
year3=unique(courseStructure$`科目名稱`[pick_year&pick_major3]),
year4=unique(courseStructure$`科目名稱`[pick_year&pick_major4]))
return(course)
}
get_courses
# get_courses
majors <- c("經濟系","社學系","社工系")
entranceYears <- 100:103
# 三系對100-103學年入學學生的四個年級課程規劃
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[1]])) ->
list_major1_allYears # 經濟系
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得社會系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[2]])) ->
list_major2_allYears # 社會系
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得社工系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[3]])) ->
list_major3_allYears # 社工系
str(list_major1_allYears)
get_coursesAllYears <- function(entranceYears, major){
# 可以針對「單一」major系對entranceYears裡不同入學年一一求算該系對該入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, major)) ->
list_major1_allYears
return(list_major1_allYears)
}
# 一一將majors裡的系取出進行get_coursesAllYears運算以得到「取出系」在不同entranceYears入學年下的系課程規劃。
majors %>%
map(~get_coursesAllYears(entranceYears, .x)) -> list_coursesAllMajorsAllYears
same_grade<-function(entranceYear,major){
pick_year<-courseStructure$`學年`==as.character(entranceYear)
pick_major<-str_detect(courseStructure$`應修系級`,major)
course<-courseStructure$`科目名稱`[pick_year&pick_major]
return(course)}
list_econCourseCounts<-list(
entranceYear=c(100:103),
year1=length(unlist(map(entranceYear,~same_grade(.x,"經濟系1")))),
year2=length(unlist(map(entranceYear,~same_grade(.x,"經濟系2")))),
year3=length(unlist(map(entranceYear,~same_grade(.x,"經濟系3")))),
year4=length(unlist(map(entranceYear,~same_grade(.x,"經濟系4"))))
)
same_grade<-function(entranceYear,major){
pick_year<-courseStructure$`學年`==as.character(entranceYear)
pick_major<-str_detect(courseStructure$`應修系級`,major)
course<-courseStructure$`科目名稱`[pick_year&pick_major]
return(course)}
list_econCourseCounts<-list(
entranceYear=100:103,
year1=length(unlist(map(entranceYear,~same_grade(.x,"經濟系1")))),
year2=length(unlist(map(entranceYear,~same_grade(.x,"經濟系2")))),
year3=length(unlist(map(entranceYear,~same_grade(.x,"經濟系3")))),
year4=length(unlist(map(entranceYear,~same_grade(.x,"經濟系4"))))
)
same_grade<-function(entranceYear,major){
pick_year<-courseStructure$`學年`==as.character(entranceYear)
pick_major<-str_detect(courseStructure$`應修系級`,major)
course<-courseStructure$`科目名稱`[pick_year&pick_major]
return(course)}
list_econCourseCounts<-list(
entranceYear=100:103,
year1=length(unlist(map(entranceYear,~same_grade(.x,"經濟系1")))),
year2=length(unlist(map(entranceYear,~same_grade(.x,"經濟系2")))),
year3=length(unlist(map(entranceYear,~same_grade(.x,"經濟系3")))),
year4=length(unlist(map(entranceYear,~same_grade(.x,"經濟系4"))))
)
same_grade<-function(entranceYear,major){
pick_year<-courseStructure$`學年`==as.character(entranceYear)
pick_major<-str_detect(courseStructure$`應修系級`,major)
course<-courseStructure$`科目名稱`[pick_year&pick_major]
return(course)}
entranceYear=100:103
list_econCourseCounts<-list(
entranceYear=100:103,
year1=length(unlist(map(entranceYear,~same_grade(.x,"經濟系1")))),
year2=length(unlist(map(entranceYear,~same_grade(.x,"經濟系2")))),
year3=length(unlist(map(entranceYear,~same_grade(.x,"經濟系3")))),
year4=length(unlist(map(entranceYear,~same_grade(.x,"經濟系4"))))
)
list_econCourseCounts
# list_econCourseCounts
`1st_next_date`
`1st_next_date`<-function(id){
last_number<-as.numeric(str_extract(id,"[0-9]$"))
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6))
if(last_num%%2==0){
odd_or_even=chart$`雙`
}else{odd_or_even=chart$`單`}
if(wday(today())==odd_or_even){
data=today()
}else{
data=today()+1
}return(date)
`1st_next_date`<-function(id){
last_number<-as.numeric(str_extract(id,"[0-9]$"))
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6))
if(last_num%%2==0){
odd_or_even=chart$`雙`
}else{odd_or_even=chart$`單`}
if(wday(today())==odd_or_even){
data=today()
}else{
data=today()+1
}
return(date)
}
`1st_next_date`(Mask$`身分證字號`[[1]])
`1st_next_date`<-function(id){
last_number<-as.numeric(str_extract(id,"[0-9]$"))
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6))
if(last_num%%2==0){
odd_or_even=chart$`雙`
}else{odd_or_even=chart$`單`}
if(wday(today())==odd_or_even){
data=today()
}else{
data=today()+1
}
return(date)
}
`1st_next_date`(Mask$`身分證字號`[[1]])
`1st_next_date`<-function(id){
last_number<-as.numeric(str_extract(id,"[0-9]$"))
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6))
if(last_num%%2==0){
odd_or_even=chart$`雙`
}else{odd_or_even=chart$`單`}
if(wday(today())==odd_or_even){
data=today()
}else{
data=today()+1
}
return(date)
}
`1st_next_date`(Mask$`身分證字號`[[1]])
